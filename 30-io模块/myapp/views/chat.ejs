<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title%></title>
  </head>
  <body>
    <h1><%= title%></h1>
    <input type="text" id="text" />
    <input type="button" id="send" value="发送" />
    <select id="select">
      <!-- <option value="volvo">Volvo</option>
      <option value="saab">Saab</option>
      <option value="mercedes">Mercedes</option>
      <option value="audi">Audi</option> -->
    </select>
    <!-- 1.建立socket连接，带着token去，后端验证token，失效跳转login页，没有失效可以进入聊天室 -->
    <!-- 2.当每一个客户端上线连接时，实时显示所有连接的客户端列表 -->
    <!-- 3.下拉框选择是ALL还是某个用户，判断群聊还是私聊，群聊-所有的客户端都显示信息，私聊-仅接收方收到 -->
  </body>
  <script>
    const WebSocketType = {
      Error: 0, // 错误
      GroupList: 1, // 显示所有上线的用户列表
      GroupChat: 2, // 群聊
      SingleChat: 3, // 私聊
    };
    function createWebSocket(type, data, to) {
      return JSON.stringify({
        type,
        data,
        to,
      });
    }

    const select = document.getElementById('select');
    const text = document.getElementById('text');
    const send = document.getElementById('send');

    const ws = new WebSocket(
      `ws://localhost:8088?token=${localStorage.getItem('token')}`
    );

    ws.onopen = () => {
      console.log('连接成功');
    };

    // 接收服务器的消息
    ws.onmessage = (msgObj) => {
      msgObj = JSON.parse(msgObj.data);
      // console.log(msgObj);
      switch (msgObj.type) {
        case WebSocketType.Error:
          localStorage.removeItem('token');
          location.href = '/login';
          break;
        case WebSocketType.GroupList:
          console.log(msgObj);
          select.innerHTML = '';
          select.innerHTML =
            "<option value='all'>all</option>" +
            msgObj.data
              ?.map(
                (item) =>
                  `<option value=${item.username}>${item.username}</option>`
              )
              .join('');
          break;
        case WebSocketType.GroupChat:
          const user = msgObj.user ? `${msgObj.user}：` : '';
          console.log(`${user}${msgObj?.data}`);
          break;
        case WebSocketType.SingleChat:
          console.log(`${msgObj.user}：${msgObj?.data}`);
          break;
        default:
          break;
      }
    };

    ws.onerror = () => {
      console.log('连接出错啦');
    };

    // 发送消息给服务器
    send.onclick = () => {
      if (select.value === 'all') {
        // 群发
        ws.send(createWebSocket(WebSocketType.GroupChat, text.value));
      } else {
        // 私聊
        ws.send(
          createWebSocket(
            WebSocketType.SingleChat,
            text.value,
            select.value // 发送给谁
          )
        );
      }
    };
  </script>
</html>
